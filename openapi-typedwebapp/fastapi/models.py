# generated by fastapi-codegen:
#   filename:  petstore.yml
#   timestamp: 2024-08-08T20:24:28+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, constr


class Status(Enum):
    placed = 'placed'
    approved = 'approved'
    delivered = 'delivered'


class Order(BaseModel):
    id: Optional[int] = None
    petId: Optional[int] = None
    quantity: Optional[int] = None
    shipDate: Optional[datetime] = None
    status: Optional[Status] = Field(None, description='Order Status')
    complete: Optional[bool] = False


class Category(BaseModel):
    id: Optional[int] = None
    name: Optional[constr(regex=r'^[a-zA-Z0-9]+[a-zA-Z0-9\.\-_]*[a-zA-Z0-9]+$')] = None


class User(BaseModel):
    id: Optional[int] = None
    username: Optional[str] = None
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    email: Optional[str] = None
    password: Optional[str] = None
    phone: Optional[str] = None
    userStatus: Optional[int] = Field(None, description='User Status')


class Tag(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None


class Status1(Enum):
    available = 'available'
    pending = 'pending'
    sold = 'sold'


class Pet(BaseModel):
    id: Optional[int] = None
    category: Optional[Category] = None
    name: str = Field(..., example='doggie')
    photoUrls: List[str]
    tags: Optional[List[Tag]] = None
    status: Optional[Status1] = Field(None, description='pet status in the store')


class ApiResponse(BaseModel):
    code: Optional[int] = None
    type: Optional[str] = None
    message: Optional[str] = None


class StatusEnum(Enum):
    available = 'available'
    pending = 'pending'
    sold = 'sold'


class PetFindByStatusGetResponse(BaseModel):
    __root__: List[Pet]


class PetFindByTagsGetResponse(BaseModel):
    __root__: List[Pet]


class PetPetIdPostRequest(BaseModel):
    name: Optional[str] = Field(None, description='Updated name of the pet')
    status: Optional[str] = Field(None, description='Updated status of the pet')


class PetPetIdUploadImagePostRequest(BaseModel):
    additionalMetadata: Optional[str] = Field(
        None, description='Additional data to pass to server'
    )
    file: Optional[bytes] = Field(None, description='file to upload')


class UserCreateWithArrayPostRequest(BaseModel):
    __root__: List[User]


class UserCreateWithListPostRequest(BaseModel):
    __root__: List[User]
